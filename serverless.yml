service: temp-feature-request

plugins:
  - serverless-export-outputs
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-esbuild

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
  exclude:
    - package-lock.json
    - package.json

appSync:
  name: feature-request
  schema: schema.graphql
  authentication:
    type: 'AMAZON_COGNITO_USER_POOLS'
    config:
      awsRegion: ${self:custom.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
  logging:
    level: ${self:custom.appSyncLogLevel.${self:custom.stage}, self:custom.appSyncLogLevel.default} # Logging Level: NONE | ERROR | ALL
    excludeVerboseContent: false
  xrayEnabled: true
  resolvers:
    # Queries
    getRequests:
      type: Query
      field: getRequests
      functions:
        - dataSource: requestsTable
          code: resolvers/get-requests.js

    # Mutations
    addRequest:
      type: Mutation
      field: addRequest
      kind: UNIT
      dataSource: addRequestFunction

    like:
      type: Mutation
      field: like
      functions:
        - dataSource: likeMutation
          code: resolvers/like-request.js

    # Nested fields
    requestedProfile:
      type: Request
      field: createdBy
      functions:
        - dataSource: usersTable
          code: resolvers/created-by.js


  dataSources:
    none:
      type: NONE
    usersTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref UsersTable
    requestsTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref FeatureRequestsTable
    likeMutation:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref FeatureReviewTable
        iamRoleStatements:
          - Effect: Allow
            Action: 
              - dynamodb:PutItem
            Resource: !GetAtt FeatureReviewTable.Arn
          - Effect: Allow
            Action: 
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UsersTable.Arn
              - !GetAtt FeatureRequestsTable.Arn
    addRequestFunction:
      type: AWS_LAMBDA
      config:
        functionName: addRequest

  substitutions:
    USERS_TABLE: !Ref UsersTable
    REQUESTS_TABLE: !Ref FeatureRequestsTable
    REVIEWS_TABLE: !Ref FeatureReviewTable

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}

  appSyncLogLevel:
    default: ALL
    prod: ERROR
  
  export-env:
    overwrite: true

  exportOutputs:
    include:
      - AwsRegion
      - ApiUrl
      - CognitoUserPoolId
      - CognitoWebClientId
    output:
      file: ./.env-outputs

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  addRequest:
    handler: functions/add-request.handler
    environment:
      REQUESTS_TABLE: !Ref FeatureRequestsTable
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt FeatureRequestsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Replicas:
          - Region: us-east-1
            Tags:
              - Key: Name
                Value: users-table
              - Key: Environment
                Value: ${self:custom.stage}

    FeatureRequestsTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Replicas:
          - Region: us-east-1
            Tags:
              - Key: Name
                Value: feature-requests-table
              - Key: Environment
                Value: ${self:custom.stage}

    FeatureReviewTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: requestId
            KeyType: RANGE 
        Replicas:
          - Region: us-east-1
            Tags:
              - Key: Name
                Value: feature-review-table
              - Key: Environment
                Value: ${self:custom.stage}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn
    
    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                  Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            PolicyName: AppSyncLoggingServicePolicy


  Outputs:
    AwsRegion:
      Value: ${aws:region}

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
      
    CognitoWebClientId:
      Value: !Ref WebUserPoolClient

    ApiUrl:
      Value: ${appsync:url}